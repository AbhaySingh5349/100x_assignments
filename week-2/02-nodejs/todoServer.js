/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const fs = require('fs');
const path = require('path');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());

const filename = 'todos.json';
const filePath = path.join(__dirname, filename);

const todoData = require(filePath);

app.get('/todos', (req, res) => {
  return res.status(200).send(todoData.todos);
});

app.get('/todos/:id', (req, res) => {
  const item_id = req.params.id;

  const itemExists = checkIfItemExists(item_id);
  if (!itemExists) return res.status(404).send('item do not exists');

  const todo_arr = todoData.todos;
  const todo = todo_arr.find((item) => item.id == item_id);

  if (todo) {
    return res.status(200).json(todo);
  }
  return res.status(400).send('item not found');
});

app.post('/todos', (req, res) => {
  const { title, description } = req.body;
  const id = Date.now();

  const todo_arr = todoData.todos;
  todo_arr.push({
    id,
    title,
    // completed,
    description,
  });

  fs.writeFile(
    filePath,
    JSON.stringify({ todos: todo_arr }),
    'utf-8',
    (err) => {
      if (err) {
        return res.status(500).send('unable to update todo list');
      }
    }
  );

  return res.status(201).send('item added successfully');
});

app.put('/todos/:id', (req, res) => {
  const item_id = req.params.id;

  const itemExists = checkIfItemExists(item_id);
  // if (!itemExists) return res.status(404).send('item do not exists');

  const valid_keys = ['id', 'title', 'completed', 'description'];

  const updated_data = req.body;

  // const filtered_data = Object.fromEntries(
  //   Object.keys(updated_data)
  //     .filter((key) => valid_keys.includes(key))
  //     .map((key) => [key, updated_data[key]])
  // );

  let todo_arr = todoData.todos;
  todo_arr = todo_arr.map((item) => {
    if (item.id == item_id) {
      return { ...item, ...updated_data }; // merge existing item with updated data
    }
    return item;
  });

  fs.writeFile(
    filePath,
    JSON.stringify({ todos: todo_arr }),
    'utf-8',
    (err) => {
      if (err) {
        return res.status(500).send('unable to update todo list');
      }
    }
  );

  return res.status(200).send('item updated successfully');
});

app.delete('/todos/:id', (req, res) => {
  const item_id = req.params.id;

  const itemExists = checkIfItemExists(item_id);
  if (!itemExists) return res.status(404).send('item do not exists');

  let todo_arr = todoData.todos;
  todo_arr = todo_arr.filter((item) => item.id != item_id);

  fs.writeFile(
    filePath,
    JSON.stringify({ todos: todo_arr }),
    'utf-8',
    (err) => {
      if (err) {
        return res.status(500).send('unable to update todo list');
      }
    }
  );

  return res.status(200).send('item deleted successfully');
});

// Set the port to listen on
const port = 3001;
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});

function checkIfItemExists(id) {
  const todo_arr = todoData.todos;
  return todo_arr.some((item) => item.id == id);
}

module.exports = app;
